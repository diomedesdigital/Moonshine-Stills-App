{"version":3,"sources":["../../../src/@ionic-native/plugins/device-feedback/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AASH,IAAa,cAAc;IAAS,kCAAiB;IAArD;;IA4BA,CAAC;IA1BC;;OAEG;IAEH,iCAAQ,GAAR,cAAmB,CAAC;IAEpB;;;OAGG;IAEH,+BAAM,GAAN,UAAO,IAAY,IAAU,CAAC;IAE9B;;;OAGG;IAEH,0CAAiB,GAAjB,cAAwE,MAAM,CAAC,CAAC,CAAC;IAQnF,qBAAC;AAAD,CA5BA,AA4BC,CA5BmC,iBAAiB,GA4BpD;AANM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AArBA;IADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;8CACJ;AAOpB;IADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;4CACM;AAO9B;IADC,OAAO,EAAE;;;;uDACuE;AApBtE,cAAc;IAR1B,MAAM,CAAC;QACN,UAAU,EAAE,gBAAgB;QAC5B,MAAM,EAAE,qCAAqC;QAC7C,SAAS,EAAE,wBAAwB;QACnC,IAAI,EAAE,2CAA2C;QACjD,SAAS,EAAE,CAAC,SAAS,CAAC;KACvB,CAAC;GAEW,cAAc,CA4B1B;SA5BY,cAAc","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n/**\n * @name Device Feedback\n * @description\n *\n * Plugin that lets you provide haptic or acoustic feedback on Android devices.\n *\n * @usage\n * ```typescript\n * import { DeviceFeedback } from '@ionic-native/device-feedback';\n *\n * constructor(private deviceFeedback: DeviceFeedback) { }\n *\n * ...\n *\n *\n * this.deviceFeedback.acoustic();\n *\n * this.deviceFeedback.haptic(0);\n *\n * this.deviceFeedback.isFeedbackEnabled()\n *   .then((feedback) => {\n *     console.log(feedback);\n *     // {\n *     //   acoustic: true,\n *     //   haptic: true\n *     // }\n *   });\n *\n * ```\n */\n@Plugin({\n  pluginName: 'DeviceFeedback',\n  plugin: 'cordova-plugin-velda-devicefeedback',\n  pluginRef: 'plugins.deviceFeedback',\n  repo: 'https://github.com/VVelda/device-feedback',\n  platforms: ['Android']\n})\n\nexport class DeviceFeedback extends IonicNativePlugin {\n\n  /**\n   * Provide sound feedback to user, nevertheless respect user's settings and current active device profile as native feedback do.\n   */\n  @Cordova({ sync: true })\n  acoustic(): void { }\n\n  /**\n   * Provide vibrate feedback to user, nevertheless respect user's tactile feedback setting as native feedback do.\n   * @param type {Number} Specify type of vibration feedback. 0 for long press, 1 for virtual key, or 3 for keyboard tap.\n   */\n  @Cordova({ sync: true })\n  haptic(type: number): void { }\n\n  /**\n   * Check if haptic and acoustic feedback is enabled by user settings.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  isFeedbackEnabled(): Promise<{ haptic: boolean; acoustic: boolean; }> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}